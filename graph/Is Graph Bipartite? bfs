class Solution {
    public boolean isBipartite(int[][] graph) {

  //creating adjacency list
    int n=graph.length;
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].length;j++){
                adj.get(i).add(graph[i][j]);
            }
        }

      int [] color = new int[n];
      for(int i=0;i<n;i++)
      {
          color[i]=-1;
      }

      for(int i=0;i<n;i++)
      {  
          if(color[i]==-1)
          {
          if(checkBipartite(i,adj,color)==false)
           return false;  
      }

      }

      return true;
    }


    public boolean checkBipartite(int node,ArrayList<ArrayList<Integer>>adj,int color[])
    {
      color[node]=0;
      Queue<Integer> q = new LinkedList<>();
      q.add(node);

      while(!q.isEmpty())
      {
         int ele = q.peek();
         q.remove(ele);

         for(int i:adj.get(ele))
         {
             if(color[i]==-1)
             {
                color[i]= 1-color[ele];
                q.add(i);
             }

            else if(color[i]==color[ele])
             return false;
             
         }

      }

      return true;
    }
}
