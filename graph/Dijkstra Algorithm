
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        int dist[] = new int[V];
        PriorityQueue<Pair> minheap = new PriorityQueue<>((x,y)-> (x.distance - y.distance));
        
        for(int i=0;i<V;i++)
        {
            dist[i] =Integer.MAX_VALUE;
            
        }
        dist[S]=0;
        minheap.add(new Pair(0,S));
        
        while(minheap.size()!=0)
        {
            int dis = minheap.peek().distance;
            int node = minheap.peek().node;
            minheap.remove();
            
            for(int i=0;i<adj.get(node).size();i++)
            {
                int edgeWeight = adj.get(node).get(i).get(1);
                int adjNode = adj.get(node).get(i).get(0);
                
                if(dis+edgeWeight< dist[adjNode])
                {
                    dist[adjNode] = dis+edgeWeight;
                     minheap.add(new Pair(dist[adjNode], adjNode)); 
                }
            }
                
                
        }
         
         return dist;
    }
    
    
    class Pair {
        int distance;
        int node;
        
        Pair (int distance,int node)
        {
            this.distance=distance;
            this.node=node;
        }
    }
}

